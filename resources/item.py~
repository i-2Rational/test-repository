from flask_restful import Resource, reqparse
from flask_jwt import jwt_required
from models.item import ItemModel


class Item(Resource):
    # initialize object to be used to parse the request
    parser = reqparse.RequestParser()
    # ini menyatakan field yang kita ubah di put method
    # kalo kita masukin anyother payload selain dari field
    # they will just get erased
    parser.add_argument('price',
                        type=float,
                        required=True,
                        help="jangan kosongin field ini!"
                        )

    parser.add_argument('store_id',
                        type=int,
                        required=True,
                        help='every item needs store id ! ')

    @jwt_required()
    def get(self, name):
        item = ItemModel.find_by_name(name)

        if item:
            return item.json()
        return {'message': 'item not found !'}, 404

    def post(self, name):
        if ItemModel.find_by_name(name):
            return {'message': 'this item "{}" already exist'.format(name)}, 400
        # setelah looping, baru parse argument field into data
        data = Item.parser.parse_args()

        item = ItemModel(name, **data)

        try:
            item.save_to_db()
        except:
            return {'message': 'error ! tidak bisa melakukan input item.'}, 500

        return item.json(), 201

    def delete(self, name):
        item = ItemModel.find_by_name(name)
        if item:
            item.delete_from_db

        return {'message': 'item has been deleted !'}

    def put(self, name):
        # parse all arguments that come through json payload
        # and put the valid one into data
        data = Item.parser.parse_args()

        item = ItemModel.find_by_name(name)

        if item is None:
            item = ItemModel(name, **data)

        else:
            item.price = data['price']

        item.save_to_db()

        return item.json()


class ItemList(Resource):
    def get(self):
        # this will apply lambda function to every element in ItemModel List
        return {'items': list(map(lambda x: x.json(), ItemModel.query.all()))}
